continue
users_with_reminders
continue
users_with_reminders
continue
users_with_reminders
continue
end_of_hour_utc
continue
users_with_reminders
continue
User.joins(:tickets)
                              .where(send_due_date_reminder: true)
                              .where("due_date_reminder_time BETWEEN ? AND ?", start_of_hour_utc, end_of_hour_utc)
                              .where.not(tickets: { due_date: nil }).to_sql
end_of_hour_utc
start_of_hour_utc
v
continue
users_with_reminders
continue
users_with_reminders
continue
User.all
User
continue
users_with_reminders.size
continue
User.all
continue
end_of_hour_utc
start_of_hour_utc
User.all
User.joins(:tickets)
                              .where(send_due_date_reminder: true)
                              .where("due_date_reminder_time BETWEEN ? AND ?", start_of_hour_utc, end_of_hour_utc).size
qUser.joins(:tickets)
                              .where(send_due_date_reminder: true)
                              .where("due_date_reminder_time BETWEEN ? AND ?", start_of_hour_utc, end_of_hour_utc)
Ticket.all
start_of_hour_utc
User.joins(:tickets)
                              .where(send_due_date_reminder: true).size
users_with_reminders.size
continue
user.tickets
n
Ticket.all
User.all
continue
n
ticket
user
n
continue
n
reminder_time
n
continue
end_of_hour
start_of_hour
n
continue
n
ticket
n
ticket
n
ticket
n
ticket
n
ticket
n
ticket
n
ticket
n
ticket
n
ticket
n
ticket
n
ticket
n
ticket
tickt
continue
ticket
ticketticketti
continue
n
reminder_time
n
reminder_time
n
reminder_time
n
reminder_time
continue
n
continue
n
reminder_time.hour == current_time.hour
reminder_time.to_date == current_time.to_date
reminder_time
n
reminder_time
n
reminder_time
n
reminder_time
continue
n
reminder_time
n
nn
n
reminder_time
n
reminder_time
n
reminder_time
n
reminder_time
continue
ticket
continue
ticket
continue
ticket.user
ticket
continue
n
ticket.user
ticket
continue
ticket
continue
notification_service
continue
exc
n
continue
exc
n
notification_params[:type]
notification_params
n
reminder_time.hour == current_time.hour
reminder_time.to_date == current_time.to_date
reminder_time
n
user
continue
reload!
reminder_time
current_time
current_time >= reminder_time
reminder_time
n
user
continue
n
continue
current_time = Time.now.in_time_zone('Vienna')
current_time = Time.now.in_time_zone('Europe/Vienna')
current_time >= reminder_time
current_time
reminder_time
n
